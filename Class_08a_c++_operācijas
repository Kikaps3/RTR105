
// operācijas:          operands_1 operācija operands_2      |operācija operands|
//                                  ||
//                                  \/
//                        operācijas_rezultāts
//                              (datu tips)
// operācijas rezultātu datu tips ir "lielākais" datu tips, kas tiek izmantots
//
// matemātiskās" +,-,*,/,%
//              int il = 5, i2 = 6;
//              1r = 1r = 10
//              1r += 1r + 10;
//              1r += 10; //tas ir tas pats 1r 1r + 10; tikai kompakti pierakstīts;
//              1r++; // 1r + 1; vai 1r += 1;
// attiecību: <, <<, >>, >, ==, !=
// loģiskās: &&, ||
// loģiskās pa bitiem: &, |. ^, !
// bitu: >>, <<
// Ko pētīt šodien: kā strādā operācija?
//                      Vai operācijā drīkst izmantot jebkuru datu tipu?
//                      operāciju izpildīšanas secību? (to nosaka prioritātē; secībai kontrolei var izma$
//                      (/ (int/int vai char/cahr), %, &, |, ^, !, &&, ||, <<, >>)


#include<stdio.h>

int main()
{
char c1 = 'A', c2 = 0x45;
int i1 = 2000, i2 = 01056;
float f1 = 2, f2 = -770.896;
double d1 = -5.6e4, d2 = 456.8e-3;

printf("%d (%ld bytes) * %d (%ld bytes)",c1,sizeof(c1),i1,sizeof(i1));
printf(" = %d(%ld bytes)\n",c1*i1,sizeof(c1*i1));

// %- nedrikst lietot reāliem skaitļiem (C valodā ...)
// printf("\n%.1f (%ld bytes) %c %.2f (%ld bytes)", f1, sizeof(f1), '%', f2, sizeof (f2));
// printf("\n%.1f (%ld bytes) %% %.2f (%ld bytes)", fl, sizeof (fl), f2, sizeof(f2));
// printf(" = %.1f (%ld bytes)\n\n", f1%f2, sizeof(f1%f2));
// 78 % 65 -> 13
//999% 1000 -> 999

printf("\n%.1f (%ld bytes) %c %.2f (%ld bytes)", f1, sizeof(f1), '%', f2, sizeof (f2));
printf("\n%.1f (%ld bytes) %% %.2f (%ld bytes)", f1, sizeof(f1), f2, sizeof(f2));
printf(" = %.1f (%ld bytes)\n\n", f1%f2, sizeof(f1%f2));

return 0;
}

